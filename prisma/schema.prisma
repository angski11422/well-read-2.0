generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password String? 
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookclubs Bookclub[]
  membership BookclubMember[]
}

model Bookclub {
  id          Int       @id @default(autoincrement()) @map("_id")
  name        String
  location    String
  genre       String
  description String
  image       String?
  book        Book?      @relation(fields: [bookId], references: [id])
  bookId      Int?
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members BookclubMember[]

  @@index([creatorId])
  @@index([bookId])
}

model BookclubMember {
  bookclubId Int
  memberId String
  member User @relation(fields: [memberId], references:[id], onDelete: Cascade)
  bookclub Bookclub @relation(fields: [bookclubId], references: [id], onDelete: Cascade)

  @@id([memberId, bookclubId])
  @@index([memberId])
  @@index([bookclubId])
}

model Book {
  id         Int    @id @default(autoincrement()) @map("_id")
  author     String
  title      String
  coverImage String?
  subject    String?
  bookclubs Bookclub[]
}
